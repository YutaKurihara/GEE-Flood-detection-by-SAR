# Auto detect text files and perform LF normalization
* text=auto
//// SET OF PARAMETERS AND FUNCTIONS ////
exports.function = function(aoi,afterDate_value,beforeDate_value,pass_direction,polarization,difference_threshold) {

var after_start=afterDate_value.format("YYYY-MM-dd");
var after_end = afterDate_value.advance(12, 'day').format("YYYY-MM-dd");
var before_end = beforeDate_value.advance(1, 'day').format("YYYY-MM-dd");
var before_start= beforeDate_value.advance(-11, 'day').format("YYYY-MM-dd");



//---------------------------------- Translating User Inputs ------------------------------//




//------------------------------- DATA SELECTION & PREPROCESSING --------------------------//

// Load Sentinel-2 reflectance data.
var S2_PreEvent = ee.ImageCollection('COPERNICUS/S2')
                  .filterDate(before_start,before_end)
                  .filterBounds(aoi)
                  .sort('CLOUD_COVERAGE_ASSESSMENT',false);
var S2_PostEvent = ee.ImageCollection('COPERNICUS/S2')
                  .filterDate(after_start, after_end)
                  .filterBounds(aoi)
                  .sort('CLOUD_COVERAGE_ASSESSMENT',false);

var rgbVis = {min: 0.0, max: 3000, bands: ['B4', 'B3', 'B2']}; // for sentinel-2
var S2_PreEvent_clip = S2_PreEvent.mosaic().clip(aoi);
var S2_PostEvent_clip = S2_PostEvent.mosaic().clip(aoi);
Map.addLayer(S2_PreEvent_clip, rgbVis , 'Sentinel2: Before Event',0);
Map.addLayer(S2_PostEvent_clip, rgbVis, 'Sentinel2: After Event',0);

// Load and filter Sentinel-1 GRD data by predefined parameters 
var collection= ee.ImageCollection('COPERNICUS/S1_GRD')
  .filter(ee.Filter.eq('instrumentMode','IW'))
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', polarization))
  .filter(ee.Filter.eq('orbitProperties_pass',pass_direction)) 
  .filter(ee.Filter.eq('resolution_meters',10))
  .filterBounds(aoi)
  .select(polarization);
  
// Select images by predefined dates
var after_collection = collection.filterDate(after_start, after_end).sort('system:time_start');
var OrbitNumber = ee.Image(after_collection.first()).get('relativeOrbitNumber_start');
if (ee.Algorithms.IsEqual(ee.Number(collection.filterDate(before_start, before_end)
.filter(ee.Filter.eq('relativeOrbitNumber_start',OrbitNumber)).size()),ee.Number(0)))
{
 var before_collection = collection.filterDate(before_start, before_end).sort('system:time_start', false)
.filter(ee.Filter.eq('relativeOrbitNumber_start',OrbitNumber ));
} else{
  var before_collection = collection.filterDate(before_start, before_end).sort('system:time_start', false);
}


var before_time = before_collection.reduceColumns(ee.Reducer.min(), ["system:time_start"]);
var after_time = after_collection.reduceColumns(ee.Reducer.min(), ["system:time_start"]);

// Extract date from meta data
function dates(imgcol,imgcol2){
  var range = imgcol.reduceColumns(ee.Reducer.min(), ["system:time_start"]);
  var range2 = imgcol2.reduceColumns(ee.Reducer.max(), ["system:time_start"]);
  var printed = ee.String('from ')
    .cat(ee.Date(range.get('min')).format('YYYY-MM-dd'))
    .cat(' to ')
    .cat(ee.Date(range2.get('max')).format('YYYY-MM-dd'));
  return printed;
}

function dates2(imgcol,imgcol2){
  var range = imgcol.reduceColumns(ee.Reducer.max(), ["system:time_start"]);
  var range2 = imgcol2.reduceColumns(ee.Reducer.min(), ["system:time_start"]);
  var printed = ee.String('from ')
    .cat(ee.Date(range.get('max')).format('YYYY-MM-dd'))
    .cat(' to ')
    .cat(ee.Date(range2.get('min')).format('YYYY-MM-dd'));
  return printed;
}
// print dates of before images to console
  var before_count_s2 = S2_PreEvent.size();
print(ee.String('Sentinel2: Before Flood ').cat('(').cat(before_count_s2).cat(')'),
  dates(S2_PreEvent,S2_PreEvent));
      
// print dates of after images to console
var after_count_s2 = S2_PostEvent.size();
print(ee.String('Sentinel2: After Flood ').cat('(').cat(after_count_s2).cat(')'),
  dates(S2_PostEvent,S2_PostEvent));
  
// print dates of before images to console
  var before_count_s1 = before_collection.size();
print(ee.String('Sentinel1: Before Flood ').cat('(').cat(before_count_s1).cat(')'),
  dates(before_collection,before_collection));
      
// print dates of after images to console
var after_count_s1 = after_collection.size();
print(ee.String('Sentinel1: After Flood ').cat('(').cat(after_count_s1).cat(')'),
  dates(after_collection,after_collection));

// Create a mosaic of selected tiles and clip to study area
var before = before_collection.mosaic().clip(aoi);
var after = after_collection.mosaic().clip(aoi);


// Apply reduce the radar speckle by smoothing  
var smoothing_radius = 50;
var before_filtered = before.focal_mean(smoothing_radius, 'circle', 'meters');
var after_filtered = after.focal_mean(smoothing_radius, 'circle', 'meters');


//------------------------------- FLOOD EXTENT CALCULATION -------------------------------//

// Calculate the difference between the before and after images
var difference = after_filtered.divide(before_filtered);

// Apply the predefined difference-threshold and create the flood extent mask 
var threshold = difference_threshold;
var difference_binary = difference.gt(threshold);

// Refine flood result using additional datasets
// Include JRC layer on surface water seasonality to mask flood pixels from areas
// of "permanent" water (where there is water > 10 months of the year)
var swater = ee.Image('JRC/GSW1_0/GlobalSurfaceWater').select('seasonality');
var swater_mask = swater.updateMask(swater.gte(10));
      
//Flooded layer where perennial water bodies (water > 10 mo/yr) is assigned a 0 ue
var flooded_mask = difference_binary.where(swater_mask,0);
// final flooded area without pixels in perennial waterbodies
var flooded = flooded_mask.updateMask(flooded_mask);
      
// Compute connectivity of pixels to eliminate those connected to 8 or fewer neighbours
// This operation reduces noise of the flood extent product 
var connections = flooded.connectedPixelCount();    
var flooded = flooded.updateMask(connections.gte(8));
      
// Mask out areas with more than 5 percent slope using a Digital Elevation Model 
var DEM = ee.Image('WWF/HydroSHEDS/03VFDEM');
var terrain = ee.Algorithms.Terrain(DEM);
var slope = terrain.select('slope');
var flooded = flooded.updateMask(slope.lt(5));

// Calculate flood extent area
// Create a raster layer containing the area information of each pixel 
var flood_pixelarea = flooded.multiply(ee.Image.pixelArea());
// get flooded projection
var flooded_projection = flooded.projection();

// Sum the areas of flooded pixels
// default is set to 'bestEffort: true' in order to reduce compuation time, for a more 
// accurate result set bestEffort to false and increase 'maxPixels'. 
var flood_stats = flood_pixelarea.reduceRegion({
  reducer: ee.Reducer.sum(),              
  geometry: aoi,
  scale: 10, // native resolution 
  bestEffort: true
  });

// Convert the flood extent to hectares (area calculations are originally given in meters)  
var flood_area_ha = flood_stats
  .getNumber(polarization)
  .divide(10000)
  .round(); 


//------------------------------  DAMAGE ASSSESSMENT  ----------------------------------//

//----------------------------- Exposed population density ----------------------------//

// Load JRC Global Human Settlement Popluation Density layer
// Resolution: 100. Number of people per cell is given.
// the year of Worldmap we use is calculated by after_star date automatically.
var WorldPop = ee.ImageCollection("WorldPop/GP/100m/pop");

// Since the latest year's populaltion cannot be accessed, we replace to use available data instead of the latest one.
if (ee.Algorithms.IsEqual(ee.Number(WorldPop.filterDate(ee.String(ee.Date(after_start).get('year'))).size()),ee.Number(0)).getInfo()=== false)
{
  population_count = WorldPop.filterDate(ee.String(ee.Date(after_start).get('year'))).mosaic().clip(aoi);
} 
else {
  var population_count;
  var indicator = -1
  while(population_count === undefined)
  {
    var data_zapping = ee.Date(after_start).advance(indicator,'year').get('year')
    if (ee.Algorithms.IsEqual(ee.Number(WorldPop.filterDate(ee.String(data_zapping)).size()),ee.Number(0)).getInfo()=== false)
    {
      var population_count = WorldPop.filterDate(ee.String(data_zapping)).mosaic().clip(aoi);
    }
  var indicator = ee.Number(indicator).subtract(1);
  }
}
// Calculate the amount of exposed population

// Reproject WorlPop layer to flooded layer scale
var population_res = population_count
    .reproject({
    crs: flooded_projection
  });

// Create a raster showing exposed population only using the resampled flood layer
var population_exposed = population_res
  .updateMask(flooded)
  .updateMask(population_res);

//Maskout the area where exposed population density less than 1.
var population_mask = population_count.gte(1);
//var population_count = population_count.updateMask(population_mask);
//var population_exposed = population_exposed.updateMask(population_mask); 

//Sum pixel values of exposed population raster 
var stats = population_exposed.reduceRegion({
  reducer: ee.Reducer.sum(),
  geometry: aoi,
  scale:92.77 ,
  bestEffort:true 
});

// get number of exposed people as integer
var number_pp_exposed = stats.getNumber('population').round();



//----------------------------- Affected agricultural and urban areas ----------------------------//

// using ESA WorldCover 10m v100
var LC = ee.ImageCollection("ESA/WorldCover/v100").first().clip(aoi);

// Calculate affected cropland using the resampled flood layer
var LC_affected = LC
  .updateMask(flooded)
  .updateMask(LC);

// Extract only cropland pixels 
var cropland = LC_affected.updateMask(LC_affected.eq(40));

// Filter urban areas
var urban = LC_affected.updateMask(LC_affected.eq(50));

//calcuate the area of each pixel 
// get pixel area of affected cropland layer
var crop_stats =LC_affected.eq(40).multiply(ee.Image.pixelArea());

// get pixel area of affected urban layer
var urban_stats =LC_affected.eq(50).multiply(ee.Image.pixelArea());


// sum pixels of affected cropland layer
var crop_reducer = crop_stats.reduceRegion({
  reducer: ee.Reducer.sum(), //sum all pixels with area information                
  geometry: aoi,
  scale: 10,
  bestEffort: true
  });
// sum pixels of affected cropland layer
var urban_reducer = urban_stats.reduceRegion({
  reducer: ee.Reducer.sum(), //sum all pixels with area information                
  geometry: aoi,
  scale: 10,
  bestEffort: true
  });

// Convert to hectares
var crop_area_ha = crop_reducer
  .getNumber('Map')
  .divide(10000)
  .round(); 
  
var urban_area_ha = urban_reducer
  .getNumber('Map')
  .divide(10000)
  .round(); 
  
//------------------------------  DISPLAY PRODUCTS  ----------------------------------//


Map.addLayer(before_filtered, {min:-25,max:0}, 'Sentinel-1: Before Event',0);
Map.addLayer(after_filtered, {min:-25,max:0}, 'Sentinel-1: After Event',0);

// Difference layer
Map.addLayer(difference,{min:0,max:2},"Difference",0);

// Exposed Population
var populationExposedVis = {
  min: 1,
  max: 50.0,
  palette: ['yellow', 'orange', 'red']
};
Map.addLayer(population_exposed, populationExposedVis, 'Exposed Population',0);
Map.addLayer(population_count, populationExposedVis,'Population',0);

// ESA WorldCover Land Cover
var LC_visualization = {
  bands: ['Map'],
};
Map.addLayer(LC, LC_visualization, 'Land Cover',0);

//cropland
//Map.addLayer(LC.updateMask(LC.eq(40)), LC_visualization, 'Cropland',0);
//urban
//Map.addLayer(LC.updateMask(LC.eq(50)), LC_visualization, 'Urban',0);

// Affected cropland
Map.addLayer(cropland, LC_visualization, 'Affected Cropland Area',0); 

// Affected urban
Map.addLayer(urban,LC_visualization, 'Affected Urban Area',0); 

// Flooded areas
Map.addLayer(flooded,{palette:"0000FF"},'Flooded Area',1);

//------------------------------------- EXPORTS ------------------------------------//
// Export flooded area as GeoTIFF file 
Export.image.toDrive({
  image: flooded, 
  description: 'Flood_extent_raster',
  fileNamePrefix: 'Flood',
  region: aoi, 
  maxPixels: 1e10
});

// Export flooded area as shapefile (for further analysis in e.g. QGIS)
// Convert flood raster to polygons
var flooded_vec = flooded.reduceToVectors({
  scale: 10,
  geometryType:'polygon',
  geometry: aoi,
  eightConnected: false,
  bestEffort:true,
  tileScale:2,
});

// Export flood polygons as shape-file
Export.table.toDrive({
  collection:flooded_vec,
  description:'Flood_extent_vector',
  fileFormat:'SHP',
  fileNamePrefix:'Flood'
});


// Export auxcillary data as shp?
// Exposed population density
Export.image.toDrive({
  image:population_exposed,
  description:'Exposed_Population',
  scale: 92.77,
  fileNamePrefix:'Exposed_Population',
  region: aoi,
  maxPixels:1e10
});

Export.image.toDrive({
  image:after_filtered,
  description: 'SAR_floodArea',
  scale: 100,
  region: aoi,
  maxPixels:1e10
});


//---------------------------------- MAP PRODUCTION --------------------------------//

//-------------------------- Display the results on the map -----------------------//
var textVis = {
  'margin':'0px 8px 0px 0px',
  'fontWeight':'bold',
  'color':'white',
  'backgroundColor': '00000000'
  };
var textVis2 = {
  'margin':'0px 15px 3px 0px',
  'fontWeight':'bold',
  'color':'white',
  'backgroundColor': '00000000'
  };
var numberVIS = {
  'margin':'0px 0px 15px 0px', 
  'fontWeight':'bold',
  'color':'Red',
  'backgroundColor': '00000000'
  };
var subTextVis = {
  'margin':'0px 0px 2px 0px',
  'fontSize':'12px',
  'color':'Gainsboro',
  'backgroundColor': '00000000'
  };

var titleTextVis = {
  'margin':'0px 0px 10px 0px',
  'fontSize': '18px', 
  'font-weight':'bold', 
  'color': 'ADD8E6',
  'backgroundColor': '00000000'
  };
// set position of panel where the results will be displayed 
var results = ui.Panel({
  style: {
    position: 'bottom-right',
    padding: '8px 15px',
    width: '350px',
    backgroundColor: '00005555'
  }
});
// Create lables of the results 
// Titel and time period
var title = ui.Label('Results', titleTextVis);
var text1 = ui.Label('Flood status between:',textVis);
var number1 = ui.Label(dates2(before_collection,after_collection).getInfo(),numberVIS);
print(before_collection,after_collection)
// Estimated flood extent 
var text2 = ui.Label('Roughly estimated flood extent:',textVis);
var text2_2 = ui.Label('based on Senintel-1 imagery from '+ ee.String(before_start).getInfo() +' to '+ ee.String(after_start).getInfo(),subTextVis);
var number2 = ui.Label('Please wait...',numberVIS); 
flood_area_ha.evaluate(function(val){number2.setValue(val+' ha')}),numberVIS;

// Estimated number of exposed people
var WorldPop_date = ee.String(before_end).slice(0,4);
var text3 = ui.Label('Roughly estimated number of exposed people: ',textVis);
var text3_2 = ui.Label('WorldPop Global Project Population Data : '+ WorldPop_date.getInfo() ,subTextVis);
var number3 = ui.Label('Please wait...',numberVIS);
number_pp_exposed.evaluate(function(val){number3.setValue(val)}),numberVIS;

// Estimated area of affected cropland 
var ESA_date = ee.String(LC.get('system:index')).slice(0,4);
var text4 = ui.Label('Roughly estimated affected cropland:',textVis);
var text4_2 = ui.Label('based on ESA WorldCover 2020', subTextVis)
var number4 = ui.Label('Please wait...',numberVIS);
crop_area_ha.evaluate(function(val){number4.setValue(val+' hectares')}),numberVIS;

// Estimated area of affected urban
var text5 = ui.Label('Roughly estimated affected urban areas:',textVis);
var text5_2 = ui.Label('based on ESA WorldCover 2020', subTextVis)
var number5 = ui.Label('Please wait...',numberVIS);
urban_area_ha.evaluate(function(val){number5.setValue(val+' hectares')}),numberVIS;



//----------------------------- Display legend on the map --------------------------//
// Create legend (*credits to thisearthsite on Open Geo Blog: https://mygeoblog.com/2016/12/09/add-a-legend-to-to-your-gee-map/)
// Create legend title
var Legend = ui.Panel({
  style: {
    position: 'bottom-right',    
    stretch:'vertical',
    padding: '8px 15px',
    width: '350px',
    backgroundColor: '00005555'
  }
});
var legendTitle = ui.Label('Legend',titleTextVis);
var legendTitle1 = ui.Label('Land Cover',textVis2);
// set position of panel
var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '0px 0px',
    backgroundColor: '00000000'
  }
});

// Add the title to the panel
legend.add(legendTitle).add(legendTitle1);
 
// Creates and styles 1 row of the legend.
var makeRow = function(color, name) {
 
      // Create the label that is actually the colored box.
      var colorBox = ui.Label({
        style: {
          backgroundColor: '#' + color,
          // Use padding to give the box height and width.
          padding: '6px',
          margin: '1.5px 0 4px 0'
        }
      });
 
      // Create the label filled with the description text.
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px',backgroundColor: '00000000' ,color:'white',}
      });
 
      // return the panel
      return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal'),
        style:{backgroundColor: '00000000'}
      });
};
 
//  Palette with the colors
var palette =['006400', 'ffbb22', 'ffff4c','f096ff', 'fa0000', 'b4b4b4', 'f0f0f0', '0064c8','0096a0', '00cf75', 'fae6a0'];
 
// name of the legend
var names = ['Trees','Shrubland','Grassland','Cropland','Built-up','Barren/sparse vegetation','Snow and ice','Open water',
'Herbaceous wetland','Mangroves','Moss and lichen'];
 
// Add color and and names
for (var i = 0; i < 11; i++) {
  legend.add(makeRow(palette[i], names[i]));
  }  
 
// Create second legend title to display exposed population density

var legendTitle2 = ui.Label('Exposed population density',textVis2);

// create the legend image
var lon = ee.Image.pixelLonLat().select('longitude');
var gradient = lon.multiply((populationExposedVis.max-populationExposedVis.min)/100.0).add(populationExposedVis.min);
var legendImage = gradient.visualize(populationExposedVis);
 
// create text on top of legend
var panel = ui.Panel({
widgets: [
ui.Label('<'.concat(populationExposedVis['max']),textVis)
],style:{backgroundColor: '00000000'}
});

// create thumbnail from the image
var thumbnail = ui.Thumbnail({
image: legendImage,
params: { bbox: [0, 0, 100, 1000],
      dimensions: '170x7'},
style: {stretch: 'horizontal',padding: '1px', position: 'bottom-center',backgroundColor: '00000000'}
});
 
 
// create text on top of legend
var panel2 = ui.Panel({
widgets: [
ui.Label(populationExposedVis['min'],textVis),
], style:{stretch: 'horizontal',padding: '1px',position: 'bottom-center',backgroundColor: '00000000'}
});
 
var Pop_legend = ui.Panel({
        widgets: [panel2,panel],
        layout: ui.Panel.Layout.Flow('horizontal'),
        style:{backgroundColor: '00000000'}});
// Add the labels to the panel 
var Panel = ui.Panel([
        title,
        text1,
        number1,
        text2,
        text2_2,
        number2,
        text3,
        text3_2,
        number3,
        text4,
        text4_2,
        number4,
        text5,
        text5_2,
        number5]);
var Panel2 = ui.Panel([
        legend,
        legendTitle2,
        Pop_legend,
        thumbnail]);
Panel2.style().set('backgroundColor', '00000000');        
Panel.style().set('backgroundColor', '00000000');
results.add(Panel);
Legend.add(Panel2);
var checkbox = ui.Checkbox({
  label:'Show Legend',
  style: {position:'top-right'}
  });
var checkbox2 = ui.Checkbox({
  label:'Show Results',
  style: {position:'top-right'}
  });

checkbox.onChange(function(checked) {
Map.remove(results);
Map.remove(checkbox)
Map.add(checkbox2)
Map.add(Legend);
});

checkbox2.onChange(function(checked) {
Map.remove(Legend);
Map.remove(checkbox2)
Map.add(checkbox)
Map.add(results);
});
//Add the panel to the map 
Map.add(results);
Map.add(checkbox);
};